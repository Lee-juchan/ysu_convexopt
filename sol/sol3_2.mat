clear all; close all; clc

%% Specifications
load data/hw3_prob2
[n1 n2]= size(f);
figure(); imagesc(reshape(f,n1,n2)); colormap gray; axis image;

n=n1*n2;

%% TV functions
function res = Dh(x)
    res = circshift(x, -1, 1) - x;
end

function res = Dht(x)
    res = circshift(x, 1, 1) - x;
end

function res = Dv(x)
    res = circshift(x, -1, 2) - x;
end

function res = Dvt(x)
    res = circshift(x, 1, 2) - x;
end

%% Split-Bregman Iterative Method (ADMM)
MaxIters=1e3;
TOL=1e-4;

mu=2e-2;
lambda= mu/100

x= zeros(n1,n2);
dh= zeros(n1,n2);
dv= zeros(n1,n2);
qh= zeros(n1,n2);
qv= zeros(n1,n2);

x_old=x;
for iter=1:MaxIters
    iter

    % fn = (mu/2)*norm(x - f)^2 + norm(dh,1) + norm(dv,1) + (lambda/2)*norm(dh - Dh(x) - qh)^2 + (lambda/2)*norm(dv - Dv(x) - qv)^2
    % -- update x
    temp_x= circshift(x,-1,1) + circshift(x,1,1) + circshift(x,-1,2) + circshift(x,1,2);
    temp_x= temp_x + Dht(dh-qh) + Dvt(dv-qv);
    temp_x= lambda*temp_x + mu*f;
    x= temp_x/(mu+4*lambda);

    % -- update dh dv
    temp_dh= Dh(x)+qh;
    temp_dv= Dv(x)+qv;
    TH= 1/lambda;
    dh= (abs(temp_dh)>TH).*(abs(temp_dh)-TH).*sign(temp_dh);
    dv= (abs(temp_dv)>TH).*(abs(temp_dv)-TH).*sign(temp_dv);
    
    % -- update qh qv
    qh= qh + Dh(x)-dh;
    qv= qv + Dv(x)-dv;

    % figure(1);
    % subplot(121); imagesc(x); colormap gray; axis image;
    % subplot(122); imagesc(f); colormap gray; axis image;
    % pause(0.1)
    
    % Stopping criterion
    curr_norm= norm(x-x_old)/norm(x);
    if iter>10 && curr_norm < TOL
        disp('Tolerance reached')
        break;
    end

    x_old= x;
end


%% ADMM + reweighting L1-norm
flag_rwt=1;
delta=200;
mu=1.1e-4;
lambda= 1

x1= x; % Results from L1-norm (part (a))

Dhx=Dh(x1);
Dvx=Dv(x1);
Dhtx=Dht(x1);
Dvtx=Dvt(x1);

for rwt=1:3
    if rwt>=2
        Dhx=Dh(x);
        Dvx=Dv(x);
    end

    % -- Reweighting matrix
    Wh= 1 ./ (abs(Dhx)+delta);
    Wv= 1 ./ (abs(Dvx)+delta);
    
    % -- initialization
    if rwt==1
        x= x1;
    end

    dh= zeros(n,1);
    dv= zeros(n,1);
    qh= zeros(n,1);
    qv= zeros(n,1);

    x= reshape(x,n1,n2);
    dh= reshape(dh,n1,n2);
    dv= reshape(dv,n1,n2);
    qh= reshape(qv,n1,n2);
    qv= reshape(qv,n1,n2);

    % -- Split-Bregman
    for iter=1:MaxIters
        iter
        fn = (mu/2)*norm(x - f)^2 + norm(dh,1) + norm(dv,1) + (lambda/2)*norm(dh - Wh.*Dh(x) - qh)^2 + (lambda/2)*norm(dv - Wv.*Dv(x) - qv)^2
        % ---- 1. update x
        x= mu*f + lambda*(Wh.^2.*(circshift(x,1,2)+circshift(x,- 1,2))+Wv.^2.*( circshift(x,1,1)+circshift(x,-1,1) ) + Wh.*Dht(dh-qh) + Wv.*Dvt(dv-qv) );
        x= x./(mu+2*lambda*Wh.^2+2*lambda*Wv.^2);
        x= reshape(x,n1,n2);

        % figure(1);
        % subplot(121); imagesc(x); axis image; colormap gray;
        % subplot(122); imagesc(x1); axis image; colormap gray;
        % pause(0.1);

        % ---- 2. update dh, dv
        Dhx= Dh(x); Dvx= Dv(x);
        TH= 1/lambda;
        temp_h= Wh(:).*Dhx(:) + qh(:);
        temp_v= Wv(:).*Dvx(:) + qv(:);

        dh= (abs(temp_h)>TH).*(abs(temp_h)-TH).*sign(temp_h);
        dv= (abs(temp_v)>TH).*(abs(temp_v)-TH).*sign(temp_v);

        dh= reshape(dh,n1,n2);
        dv= reshape(dv,n1,n2);

        % ---- 3. update qh, qv
        qh= qh + (Wh.*Dhx - dh);
        qv= qv + (Wv.*Dvx - dv);

        % -- Stopping criterion
        curr_norm= norm(x-x_old)./norm(x)
        if iter>10 && curr_norm < 5e-5;
            iter
            disp('Tolerance reached');
            break;
        end

        x_old=x;
    end
end