clear all; close all; clc;

m= 200; n=200;
alpha= 0.01;
beta= 0.5;
%%%%%%%%
load data/hw2_prob1.mat;
x= zeros(n,1);
%%%%%%%%%
MAXITERS= 1000;
NTTOL= 1e-8;
TOL= 1e-3;

%% Gradient Descent Method
f=[];
hist_f=[];
hist_t=[];

for iter=1:MAXITERS
    iter
    %----- Update values of f and gradient of f (grad)
    f= -sum(log(1-A*x)) - sum(log(1-x)) ;
    hist_f(iter)=f;

    grad= A'*(1./(1-A*x)) + 1./(1-x);
    delta_x= -grad;

    %----- Stopping Criterion
    if norm(grad)<TOL;
        break;
        disp('Tolerance reached');
    end;

    %----- Backtracking linesearch
    t=1;
    % Check feasibility of x
    while max(A*(x + t*delta_x)) >=1 || max( (x + t*delta_x)) >=1;
        t= beta*t;
    end
    % Body of linesearch
    while (-sum(log(1-A*(x + t*delta_x))) - sum(log(1-(x + t*delta_x))) )> (f + alpha*t*grad'*delta_x)
        t= beta*t;
    end

    %----- Update x
    x= x + t*delta_x;
    hist_t(iter)=t;

end

opt_f= -sum(log(1-A*x)) - sum(log(1-x));

%% Plot
figure(1); semilogy(hist_f-opt_f);
figure(2); plot(hist_t);



%% Newton's Method
clear all; close all; clc;
m= 200; n=100;
alpha= 0.01;
beta= 0.5;
%%%%%%%%
load data/hw2_prob1;
x= zeros(n,1);
%%%%%%%%%
MAXITERS= 1000;
TOL= 1e-3;

%% Newton's Method
f=[];
hist_f=[];
hist_t=[];

for iter=1:MAXITERS
    iter

    %----- Update values of f, gradient of f (grad), and hessian of f (hess)
    f= -sum(log(1-A*x))- sum(log(1-x)); % - sum(log(1-x)) ;
    hist_f(iter)=f;

    grad= A'*(1./(1-A*x)) + 1./(1-x);
    hess= A'*diag(1./(1-A*x).^2)*A + diag( 1./(1-x).^2 ) ;
    delta_x= -inv(hess)*grad;

    %----- Stopping Criterion
    if norm(grad)<TOL;
        break;
        disp('Tolerance reached');
    end;

    %----- Backtracking linesearch
    t=1;
    % Check feasibility of x
    while max(A*(x + t*delta_x)) >=1 || max((x + t*delta_x)) >=1;
        t= beta*t;
    end
    % Body of linesearch
    while (-sum(log(1-A*(x + t*delta_x))) - sum(log(1-(x + t*delta_x))) ) > (f + alpha*t*grad'*delta_x)
        t= beta*t;
    end

    %----- Update x
    x= x + t*delta_x;
    hist_t(iter)=t;

end

opt_f= -sum(log(1-A*x)) - sum(log(1-x));

%% Plot
figure(1); semilogy(hist_f-opt_f);
figure(2); plot(hist_t);